// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: recon/jobmgmt/adminapi/worker_admin.proto

package jobmgmt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	JobmgmtAdminApiService_TriggerJob_FullMethodName = "/recon.jobmgmt.adminapi.JobmgmtAdminApiService/TriggerJob"
	JobmgmtAdminApiService_GetStatus_FullMethodName  = "/recon.jobmgmt.adminapi.JobmgmtAdminApiService/GetStatus"
)

// JobmgmtAdminApiServiceClient is the client API for JobmgmtAdminApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// GRPC-only
// to be implemented by worker microservices
type JobmgmtAdminApiServiceClient interface {
	TriggerJob(ctx context.Context, in *TriggerJobRequest, opts ...grpc.CallOption) (*TriggerJobResponse, error)
	// returns runtime status & parameters
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
}

type jobmgmtAdminApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobmgmtAdminApiServiceClient(cc grpc.ClientConnInterface) JobmgmtAdminApiServiceClient {
	return &jobmgmtAdminApiServiceClient{cc}
}

func (c *jobmgmtAdminApiServiceClient) TriggerJob(ctx context.Context, in *TriggerJobRequest, opts ...grpc.CallOption) (*TriggerJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TriggerJobResponse)
	err := c.cc.Invoke(ctx, JobmgmtAdminApiService_TriggerJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobmgmtAdminApiServiceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, JobmgmtAdminApiService_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobmgmtAdminApiServiceServer is the server API for JobmgmtAdminApiService service.
// All implementations should embed UnimplementedJobmgmtAdminApiServiceServer
// for forward compatibility.
//
// GRPC-only
// to be implemented by worker microservices
type JobmgmtAdminApiServiceServer interface {
	TriggerJob(context.Context, *TriggerJobRequest) (*TriggerJobResponse, error)
	// returns runtime status & parameters
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
}

// UnimplementedJobmgmtAdminApiServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJobmgmtAdminApiServiceServer struct{}

func (UnimplementedJobmgmtAdminApiServiceServer) TriggerJob(context.Context, *TriggerJobRequest) (*TriggerJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerJob not implemented")
}
func (UnimplementedJobmgmtAdminApiServiceServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedJobmgmtAdminApiServiceServer) testEmbeddedByValue() {}

// UnsafeJobmgmtAdminApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobmgmtAdminApiServiceServer will
// result in compilation errors.
type UnsafeJobmgmtAdminApiServiceServer interface {
	mustEmbedUnimplementedJobmgmtAdminApiServiceServer()
}

func RegisterJobmgmtAdminApiServiceServer(s grpc.ServiceRegistrar, srv JobmgmtAdminApiServiceServer) {
	// If the following call pancis, it indicates UnimplementedJobmgmtAdminApiServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&JobmgmtAdminApiService_ServiceDesc, srv)
}

func _JobmgmtAdminApiService_TriggerJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobmgmtAdminApiServiceServer).TriggerJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobmgmtAdminApiService_TriggerJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobmgmtAdminApiServiceServer).TriggerJob(ctx, req.(*TriggerJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobmgmtAdminApiService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobmgmtAdminApiServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobmgmtAdminApiService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobmgmtAdminApiServiceServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobmgmtAdminApiService_ServiceDesc is the grpc.ServiceDesc for JobmgmtAdminApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobmgmtAdminApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "recon.jobmgmt.adminapi.JobmgmtAdminApiService",
	HandlerType: (*JobmgmtAdminApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TriggerJob",
			Handler:    _JobmgmtAdminApiService_TriggerJob_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _JobmgmtAdminApiService_GetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recon/jobmgmt/adminapi/worker_admin.proto",
}
